//Problem 1 Solution with Arrays:

function sumOfDistinctElements(set1, set2){
  let distinct = [];  // initialize an empty array to hold distinct elements
  let sum = 0;        // initialize sum to 0
  for(let i=0; i<set1.length; i++){
    if(!distinct.includes(set1[i])){  // if the element is not already present in the distinct array
      distinct.push(set1[i]);         // add it to the distinct array
      sum += set1[i];                 // and add it to the sum
    }
  }
  for(let i=0; i<set2.length; i++){
    if(!distinct.includes(set2[i])){  // do the same for set2
      distinct.push(set2[i]);
      sum += set2[i];
    }
  }
  return sum;   // return the sum of distinct elements
}
//Explanation: The algorithm takes two sets as input and initializes an empty array and a sum variable to 0. Then it loops through each element of set1 and checks if it's not already present in the distinct array. If the element is not present, it adds it to the distinct array and adds its value to the sum variable. It does the same for set2. Finally, it returns the sum of all distinct elements.




let set1 = [3, 1, 7, 9];
let set2 = [2, 4, 1, 9, 3];
console.log(sumOfDistinctElements(set1, set2));  // output: 13

//Problem 2 Solution with Arrays:


function dot_product(v1, v2){
  let ps = 0;  // initialize dot product to 0
  for(let i=0; i<v1.length; i++){
    ps += v1[i] * v2[i];  // calculate the dot product
  }
  return ps;  // return the dot product
}

function areOrthogonal(vectors){
  for(let i=0; i<vectors.length; i++){
    for(let j=i+1; j<vectors.length; j++){  // loop through all pairs of vectors
      let dot = dot_product(vectors[i], vectors[j]);  // calculate the dot product
      if(dot != 0){  // if the dot product is not 0, the vectors are not orthogonal
        return false;
      }
    }
  }
  return true;  // if all dot products are 0, the vectors are orthogonal
}
//Explanation: The first function takes two vectors as input and returns their dot product. The second function takes an array of vectors as input and loops through all pairs of vectors. For each pair of vectors, it calls the dot_product function to calculate their dot product. If the dot product is not 0, it means the vectors are not orthogonal and the function returns false. If all dot products are 0, it means the vectors are orthogonal and the function returns true.



let vectors = [[1, 2, 3], [4, 5, 6], [0, 0, 1]];
console.log(areOrthogonal(vectors));  // output: true